/***/ DATA_POINTS
            <div class="form-container-point">
                <div class="point_hero" id="point_hero_LLABEL">
                    <div class="point-edit">
                        <label for="point_input_LLABEL">CLABEL
                            <input type="text" id="point_input_LLABEL" class="point_input">
                        </label>
                        <input type="button" value="+" id="point_add_LLABEL" class="point_add">
                    </div>

                    <label for="point_data_LLABEL">
                        <input type="text" hidden="hidden" id="point_data_LLABEL" name="point_data_LLABEL"
                               value="<?php echo esc_attr($point_LLABEL); ?>">
                    </label>
                    <div id="point_container_LLABEL" class="point_container">

                    </div>
                </div>
            </div>
/***/  GET_POINTS
    $point_LLABEL = get_post_meta($post->ID, 'point_data_LLABEL', true);
/***/  PROCESS_POINTS
    create_meta_field_config('point_data_LLABEL', 'CLABEL', 'sanitize_text_field', 'normalize_to_array')
/***/  CONCLASS_POINTS

    form-container-point

/***/ POINTS_FUNCTIONS
function processPoint(pointNames) {
    
    function enableDragAndDrop(container, pointName) {
        let draggedItem = null;

        // Add event listeners to all existing items in the container
        container.querySelectorAll('.point_item').forEach(item => {
            item.setAttribute('draggable', 'true');
            addDragEvents(item);
        });

        function addDragEvents(item) {
            // When drag starts
            item.addEventListener('dragstart', function(e) {
                draggedItem = item;
                setTimeout(() => {
                    item.classList.add('dragging');
                }, 0);
            });

            // When drag ends
            item.addEventListener('dragend', function() {
                item.classList.remove('dragging');
                draggedItem = null;
                // Update data after dragging is complete
                pointUpdateForRestApi(pointName);
            });

            // Prevent default behaviors for some events
            item.addEventListener('dragover', function(e) {
                e.preventDefault();
            });

            item.addEventListener('dragenter', function(e) {
                e.preventDefault();
                if (this !== draggedItem) {
                    this.classList.add('drag-over');
                }
            });

            item.addEventListener('dragleave', function() {
                this.classList.remove('drag-over');
            });

            // Handle dropping
            item.addEventListener('drop', function(e) {
                e.preventDefault();
                this.classList.remove('drag-over');

                if (draggedItem && this !== draggedItem) {
                    // Get positions to determine order
                    const thisRect = this.getBoundingClientRect();
                    const draggedRect = draggedItem.getBoundingClientRect();

                    // Determine if dragged item should be before or after this item
                    if (draggedRect.top < thisRect.top) {
                        container.insertBefore(draggedItem, this);
                    } else {
                        container.insertBefore(draggedItem, this.nextSibling);
                    }
                }
            });
        }

        // Container level events
        container.addEventListener('dragover', function(e) {
            e.preventDefault();
            // Only proceed if we have a valid draggedItem
            if (!draggedItem) return;

            const afterElement = getDragAfterElement(container, e.clientY);
            if (afterElement === null) {
                // Only append if draggedItem exists
                container.appendChild(draggedItem);
            } else if (afterElement !== draggedItem) {
                container.insertBefore(draggedItem, afterElement);
            }
        });

        container.addEventListener('drop', function(e) {
            e.preventDefault();
            // Update after drop
            pointUpdateForRestApi(pointName);
        });

        function getDragAfterElement(container, y) {
            // Convert NodeList to Array and filter out the currently dragged element
            const draggableElements = [...container.querySelectorAll('.point_item:not(.dragging)')];

            // If no elements, return null
            if (draggableElements.length === 0) return null;

            // Find the closest element after cursor position
            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;

                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }
    }
    function pointAdd(pointName, pointValue){

        const pointItemMain = document.getElementById(`point_container_${pointName}`)

        const pointItemDiv = document.createElement('div')
        pointItemDiv.classList.add('point_item')


        const pointItemSpan = document.createElement('span')
        pointItemSpan.textContent = pointValue

        const pointItemBtn = document.createElement('input')
        pointItemBtn.type='button'
        pointItemBtn.value='x'
        pointItemBtn.classList.add('point_del')
        pointItemBtn.addEventListener('click', function (){
            pointItemMain.removeChild(pointItemDiv)
            pointUpdateForRestApi(pointName)
        })

        pointItemDiv.appendChild(pointItemSpan)
        pointItemDiv.appendChild(pointItemBtn)
        pointItemMain.appendChild(pointItemDiv)
        pointUpdateForRestApi(pointName)
        enableDragAndDrop(pointItemMain, pointName)
    }

    function pointUpdateForRestApi(pointName){
        const pointItemMain = document.getElementById(`point_container_${pointName}`)
        const pointData = document.getElementById(`point_data_${pointName}`)
        let pointDataArray = []

        pointItemMain.querySelectorAll('.point_item').forEach( item =>{
            const pointValue = item.querySelector('span').textContent.trim()
            pointDataArray.push(pointValue)
        })

        pointData.setAttribute('value',JSON.stringify(pointDataArray))

    }

    function pointLoad(pointName) {
        const pointData = document.getElementById(`point_data_${pointName}`);
        let pointDataArray = [];

        try {
            const parsed = JSON.parse(pointData.value);
            if (Array.isArray(parsed)) {
                pointDataArray = parsed;
            }
        } catch (e) {
            console.warn(`Не вдалося розпарсити дані для ${pointName}:`, e);
        }

        pointDataArray.forEach(pointValue => {
            pointAdd(pointName, pointValue);
        });
    }
    
    pointNames.forEach(pointName =>{
        pointLoad(pointName)
        document.getElementById(`point_add_${pointName}`).addEventListener('click', function (){
            const pointValue = document.getElementById(`point_input_${pointName}`)

            if (!pointValue.value.trim()) {
                // Додаємо клас одразу
                pointValue.classList.add('error');

                // А потім через деякий час — прибираємо, щоб ефект був тимчасовий
                setTimeout(function () {
                    pointValue.classList.remove('error');
                }, 1500); // наприклад, через 0.8 сек
            }else {
                pointAdd(pointName, pointValue.value.trim())
                pointValue.value = ''

            }

        })
    })

    
}
/***/ POINTS_INC
    let points = ['DATA_POINTS_VALUES']
    processPoint(points)

/***/  STYLE_POINT
/* All point styles*/
[class^="form-container-"].form-container-point {
    margin-bottom: 24px;
    padding: 16px;
    border: 1px solid #ccc;
    border-radius: 12px;
    background-color: #fff;
}

.form-container-point .point_hero {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.form-container-point .point-edit {
    display: flex;
    align-items: center;
    gap: 12px;
}

.form-container-point .point_input {
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 14px;
    width: 200px;
}

.form-container-point .point_add {
    padding: 8px 16px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s ease-in-out;
}

.form-container-point .point_add:hover {
    background-color: #0056b3;
}

.form-container-point .point_container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    padding-top: 10px;
}

.form-container-point .point_item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 6px 10px;
    border: 1px solid #ccc;
    border-radius: 8px;
    background-color: #f5f5f5;
    cursor: grab;
    transition: background-color 0.2s;
}

.form-container-point .point_item:active {
    cursor: grabbing;
    background-color: #e0e0e0;
}

.form-container-point .point_item span {
    font-size: 14px;
    font-weight: bold;
}

.form-container-point .point_del {
    padding: 4px 8px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 12px;
}

.form-container-point .point_del:hover {
    background-color: #c82333;
}

/***/ END